%% SG_reversibleAdiabat
% Compute water vapor specific humidity and temperature along a reversible
% adiabat.
%
% Tristan Abbott // Massachusetts Institute of Technology // 11/14/2017
%
%%% Syntax
%   [qv, T] = SG_reversibleAdiabat(grid, 'hL', 'qv', 'qn', 'qp');
%
%%% Description
% Compute temperature and specific humidity profiles along reversible
% adiabats starting from the surface. Reversible adiabats are defined as
% profiles with constant FMSE, precipitating water mass fraction, and
% non-precipitating water mass fraction equal to their values in the lowest
% model level.
%
%%% Input Arguments
% *grid - SAM C-grid struct:*
% A struct containing grid information generated by SG_grid and fields
% added by SG_addVar.
%
% *hL, qv, qn, qp - names of fields:*
% String keys that can be used to look up FMSE, water vapor, cloud
% condensate, precipitating condensate, and pressure. 
% FMSE can be computed using SG_hL.
%
%%% Output Arguments
%
% *qv - specific humidity profiles:*
% Array containing reversible adiabatic specific humidity at tracer cell
% centers.
%
% *T - temperature profiles:*
% Array containing reversible adiabatic temperature profiles at tracer cell
% centers.
%

function [qv, T] = SG_reversibleAdiabat(grid, hL, qv, qn, qp)
    d = size(grid.(hL));
    vars = SOM_moistAdiabat(squeeze(grid.(hL)(1,:,:)), ...
        squeeze(grid.(qv)(1,:,:) + grid.(qn)(1,:,:)), ...
        squeeze(grid.(qp)(1,:,:)), reshape(grid.z, [1 1 d(1)]), ...
        permute(grid.pp, [2 3 1]));
    qv = permute(repmat(squeeze(grid.(qv)(1,:,:) + grid.(qn)(1,:,:)), ...
            [1 1 d(1)]) - vars.qn, [3 1 2]);
    T = permute(vars.T, [3 1 2]);
end