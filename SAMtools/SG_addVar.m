%% SG_grid
% Add a variable to the grid generated by SG_grid
%
% Tristan Abbott // Massachusetts Institute of Technology // 11/14/2017
%
%%% Syntax
%   grid.fld = SG_addVar(var, loc)
%
%%% Description
% Adds a variable to the C-grid data structure and exchanges values on
% boundaries as needed.
%
%%% Input Arguments
% *var - field from SAM output:*
% A 3D array containing data read from a SAM output file. The dimensions
% are assumed to be (x, y, z).
%
% *loc - 'u', 'v', 'w', 's', 'rho', 'rhoi':*
% Location of the variable on the grid-- at u locations, v locations, w
% locations, or s locations, or reference densities as scalar ('rho') or
% vertical velocity ('rhoi') levels. This determines how data is exchanged on
% boundaries before returning the new array.
%
%%% Output Arguments
%
% *fld - rearranged field:*
% Modified version of the input array with dimensions rearranged to follow
% SG_grid convention and velocity values exchanged on the appropriate
% boundarties.
%
function fld = SG_addVar(var, loc)

    nx = size(var, 1);
    ny = size(var, 2);
    nz = size(var, 3);
    
    switch lower(loc)
        case 'u'
            fld = zeros(nx+1, ny, nz);
            fld(1:nx,:,:) = var;
            fld(nx+1,:,:) = var(1,:,:);
            fld = permute(fld, [3 2 1]);     
        case 'v'
            fld = zeros(nx, ny+1, nz);
            fld(:,1:ny,:) = var;
            fld(:,ny+1,:) = var(:,1,:);
            fld = permute(fld, [3 2 1]);     
        case 'w'
            fld = zeros(nx, ny, nz+1);
            fld(:,:,1:nz) = var;
            fld = permute(fld, [3 2 1]);     
        case 's'
            fld = var;
            fld = permute(fld, [3 2 1]);     
        case 'rho'
            fld = squeeze(var(1,1,:));
        case 'rhoi'
            fld = zeros(nz+1, 1);
            fld(1:nz) = squeeze(var(1,1,:));
            fld(end) = 2*fld(end-1) - fld(end-2);
        otherwise
            error('SG_addVar: unknown loc value %s', lower(loc))
    end
    
end
