%% SG_adiabaticDqndz
% Compute total height derivative of cloud water specific humidity
% (i.e. change in cloud water with height for adiabatically ascending parcels)
%
% Tristan Abbott // Massachusetts Institute of Technology // 1/29/2018
%
%%% Syntax
%   dqndz = SG_adiabaticDqndz(grid, 'T', 'qv', 'qn');
%
%%% Description
% Computes the rate at which cloud water changes with height as a parcel
% ascends adiabatically, i.e. as $z$ and $T$ change while $h_L$ and the
% total water (vapor plus condensed) remain constant.
%
%%% Input Arguments
% *grid - SAM C-grid struct:*
% A struct containing grid information generated by SG_grid and fields
% added by SG_addVar.
%
% *T, qv, qn - names of fields:*
% String keys that can be used to look up temperature, water vapor,
% and non-precipitating condensate fields.
%
%%% Output Arguments
%
% *dqndz - cloud water adiabatic derivatives:*
% Array containing adiabatic height derivatives of cloud water at
% tracer cell centers.
%

function dqndz = SG_adiabaticDqndz(grid, T, qv, qn)

    global SAM_g;

    % Set up grid
    d = size(grid.(T));
    z = repmat(grid.z, [1 d(2) d(3)]);
    rho = repmat(grid.rho, [1 d(2) d(3)]);

    % Compute FMSE field
    % Assume no precipitating condensate; doesn't affect results
    % so long as it remains fixed
    hL = SAM_hL(grid.(T), z, grid.(qn), zeros(d));

    % Make sure fields are consistent
    res = SOM_getState(hL, grid.(qv) + grid.(qn), zeros(d), z, grid.pp);
    qn1 = res.qn;

    % Perturb z
    dz = 10; % m
    z = z + dz;

    % Add hydrostatic pressure perturbation
    dp = -SAM_g*dz*rho;
    p = grid.pp + dp;

    % Compute new cloud water field
    res = SOM_getState(hL, grid.(qv) + grid.(qn), zeros(d), z, p);

    % Compute change with height (units 1/m)
    dqndz = (res.qn - qn1)/dz;

end
